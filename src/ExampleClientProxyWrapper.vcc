#include "ExampleClientProxyWrapper.h"

ExampleClientProxyWrapper::ExampleClientProxyWrapper(const std::string client_uri,const std::string server_uri){
    erpc::Nexus nexus(client_uri, 0, 0);
    rpc = new erpc::Rpc<erpc::CTransport>(&nexus, nullptr, 0, sm_handler);
    session_num = rpc->create_session(server_uri, 0);
    while (!rpc->is_connected(session_num)) rpc->run_event_loop_once();
}

int ExampleClientProxyWrapper::hello(){
    req = rpc->alloc_msg_buffer_or_die(strlen("hello"));
    sprintf(reinterpret_cast<char *>(req.buf), "%s", "hello");
    resp = rpc->alloc_msg_buffer_or_die(strlen("world"));

    rpc->enqueue_request(session_num, 17, &req, &resp, cont_func, nullptr);
    rpc->run_event_loop(1000 /* 1 second */);

}
//add 1 and 2 for now
int ExampleClientProxyWrapper::add(int x, int y){
    req = rpc->alloc_msg_buffer_or_die(strlen("1 + 2"));
    sprintf(reinterpret_cast<char *>(req.buf), "%s", "1 + 2");
    resp = rpc->alloc_msg_buffer_or_die(strlen("3"));

    rpc->enqueue_request(session_num, 17, &req, &resp, cont_func, nullptr);
    rpc->run_event_loop(1000 /* 1 second */);

}